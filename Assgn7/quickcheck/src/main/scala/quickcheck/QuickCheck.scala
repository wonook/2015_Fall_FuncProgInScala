package quickcheck

import common._

import org.scalacheck._
import Arbitrary._
import Gen._
import Prop._

abstract class QuickCheckHeap extends Properties("Heap") with IntHeap {

  lazy val genHeap: Gen[H] = for {
  	x <- arbitrary[Int]
  	h <- oneOf(const(empty), genHeap)
  } yield insert(x, h)

  implicit lazy val arbHeap: Arbitrary[H] = Arbitrary(genHeap)

  property("insert an elem into empty and findMin should yield elem") = forAll { (a: Int) =>
  	val h = insert(a, empty)
  	findMin(h) == a
  }

  property("insert findMin into h and findMin should yield findMin") = forAll { (h: H) =>
    val m = if (isEmpty(h)) 0 else findMin(h)
    findMin(insert(m, h)) == m
  }

  property("insert two elems into empty and findMin should yield smaller of the two elems") = forAll { (a: Int, b: Int) =>
  	val h1 = insert(a, empty)
  	val h2 = insert(b, h1)
  	findMin(h2) == Math.min(a, b)
  }

  property("insert an elem into empty and delete it should yield empty") = forAll { (a: Int) =>
  	val h = insert(a, empty)
  	deleteMin(h) == empty
  }

  property("insert two elems into empty and delete twice should yield empty") = forAll { (a: Int, b: Int) =>
  	val h = insert(a, insert(b, empty))
  	deleteMin(deleteMin(h)) == empty
  }

  property("list generated by findMin recursively should yield sorted list") = forAll { (h: H) =>
  	def hToList(h: H): List[Int] = {
  	  if (isEmpty(h)) Nil
  	  else findMin(h)::hToList(deleteMin(h))
  	}
  	val lst = hToList(h)
  	lst == lst.sorted
  }

  property("meld two heaps and findMin should yield smaller of the two findMin") = forAll { (h1: H, h2: H) =>
  	val mld = meld(h1, h2)
  	findMin(mld) == findMin(h1) || findMin(mld) == findMin(h2)
  }

  property("insert two elems into empty and findMin of deleteMin should yield greater of the two elems") = forAll { (a: Int, b: Int) =>
  	val h1 = insert(a, empty)
  	val h2 = insert(b, h1)
  	findMin(deleteMin(h2)) == Math.max(a, b)
  }

  property("moving h1's findMin to h2 should yield same result") = forAll { (h1: H, h2: H) =>
  	def hToList(h: H): List[Int] = {
  	  if (isEmpty(h)) Nil
  	  else findMin(h)::hToList(deleteMin(h))
  	}
  	val h1m = findMin(h1)
  	val mld1 = meld(h1, h2)
  	val mld2 = meld(deleteMin(h1), insert(h1m, h2))
  	hToList(mld1) == hToList(mld2)
  }


}
